{"ast":null,"code":"// import React from 'react';\n// import {\n//   Table,\n//   Pagination,\n//   Select\n// } from 'antd'\n// import MenuBar from '../components/MenuBar';\n// import { getAllMatches, getAllPlayers } from '../fetcher'\n// const { Column, ColumnGroup } = Table;\n// const { Option } = Select;\n// const playerColumns = [\n//   {\n//     title: 'Name',\n//     dataIndex: 'Name',\n//     key: 'Name',\n//     sorter: (a, b) => a.Name.localeCompare(b.Name),\n//     render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>\n//   },\n//   {\n//     title: 'Nationality',\n//     dataIndex: 'Nationality',\n//     key: 'Nationality',\n//     sorter: (a, b) => a.Nationality.localeCompare(b.Nationality)\n//   },\n//   {\n//     title: 'Rating',\n//     dataIndex: 'Rating',\n//     key: 'Rating',\n//     sorter: (a, b) => a.Rating - b.Rating\n//   },\n//   // TASK 7: add a column for Potential, with the ability to (numerically) sort ,\n//   {\n//     title: 'Potential',\n//     dataIndex: 'Potential',\n//     key: 'Potential',\n//     sorter: (a, b) => a.Potential - b.Potential\n//   },\n//   // TASK 8: add a column for Club, with the ability to (alphabetically) sort \n//   {\n//     title: 'Club',\n//     dataIndex: 'Club',\n//     key: 'Club',\n//     sorter: (a, b) => a.Club.localeCompare(b.Club)\n//   },\n//   // TASK 9: add a column for Value - no sorting required\n//   {\n//     title: 'Value',\n//     dataIndex: 'Value',\n//     key: 'Value'\n//   }\n// ];\n// class HomePage extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.state = {\n//       matchesResults: [],\n//       matchesPageNumber: 1,\n//       matchesPageSize: 10,\n//       playersResults: [],\n//       pagination: null  \n//     }\n//     this.leagueOnChange = this.leagueOnChange.bind(this)\n//     this.goToMatch = this.goToMatch.bind(this)\n//   }\n//   goToMatch(matchId) {\n//     window.location = `/matches?id=${matchId}`\n//   }\n//   leagueOnChange(value) {\n//     // TASK 2: this value should be used as a parameter to call getAllMatches in fetcher.js with the parameters page and pageSize set to null\n//     // then, matchesResults in state should be set to the results returned - see a similar function call in componentDidMount()\n//     /** function declaration (fetcher.js): getAllMatches = async (page, pagesize, league) */\n//     // `value` arg of this function should be passed as arg in position of `league` into getAllMatches()\n//     getAllMatches(null, null, value).then(res => {\n//       this.setState({ matchesResults: res.results })\n//     })\n//   }\n//   componentDidMount() {\n//     getAllMatches(null, null, 'D1').then(res => {\n//       this.setState({ matchesResults: res.results })\n//     })\n//     getAllPlayers().then(res => {\n//       console.log(res.results)\n//       // TASK 1: set the correct state attribute to res.results\n//       this.setState({playersResults: res.results})\n//       // recall in routes.js, all functions return query results in k/v-pairs of [results: queryResults] \n//       // so res.results here is deferencing this k/v-pair to get the value ==> queryResults\n//     })\n//   }\n//   render() {\n//     return (\n//       <div>\n//         <MenuBar />\n//         <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\n//           <h3>Players</h3>\n//           <Table dataSource={this.state.playersResults} columns={playerColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n//         </div>\n//         <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\n//           <h3>Matches</h3>\n//           <Select defaultValue=\"D1\" style={{ width: 120 }} onChange={this.leagueOnChange}>\n//             <Option value=\"D1\">Bundesliga</Option>\n//              {/* TASK 3: Take a look at Dataset Information.md from MS1 and add other options to the selector here  */}\n//             <Option value=\"SP1\">La Liga</Option>\n//             <Option value=\"F1\">Ligue 1</Option>\n//             <Option value=\"I1\">Serie A</Option>\n//             <Option value=\"E0\">Premier League</Option>\n//           </Select>\n//           <Table onRow={(record, rowIndex) => { return {\n//                                                   onClick: event => {this.goToMatch(record.MatchId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \n//                                                 };\n//                                               }} \n//                   dataSource={this.state.matchesResults} \n//                   pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\n//                   <ColumnGroup title=\"Teams\">\n//                     {/* TASK 4: correct the title for the 'Home' column and add a similar column for 'Away' team in this ColumnGroup */}\n//                     <Column title=\"H\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/> {/* localeCompare() is a JS string method, that compare string a & b */}\n//                     <Column title=\"A\" dataIndex=\"Away\" key=\"Away\" sorter= {(a, b) => a.Away.localeCompare(b.Away)}/>\n//                   </ColumnGroup>\n//                   <ColumnGroup title=\"Goals\">\n//                     {/* TASK 5: add columns for home and away goals in this ColumnGroup, with the ability to sort values in these columns numerically */}\n//                     <Column title=\"HomeGoals\" dataIndex=\"HomeGoals\" key=\"HomeGoals\" sorter= {(a, b) => a.HomeGoals - b.HomeGoals}/>\n//                     <Column title=\"AwayGoals\" dataIndex=\"AwayGoals\" key=\"AwayGoals\" sorter= {(a, b) => a.AwayGoals - b.AwayGoals}/>\n//                   </ColumnGroup>\n//                   {/* TASK 6: create two columns (independent - not in a column group) for the date and time. Do not add a sorting functionality */}\n//                   <Column title=\"Date\" dataIndex=\"Date\" key=\"Date\"/>\n//                   <Column title=\"Time\" dataIndex=\"Time\" key=\"Time\"/>\n//           </Table>\n//         </div>\n//       </div>\n//     )\n//   }\n// }\n// export default HomePage","map":{"version":3,"sources":["/Users/yinjiezhang/Desktop/Final_Project/550_Final_project/code/gitrepo_550/WebApp_Gallery/client/src/pages/HomePage.js"],"names":[],"mappingssourcesContent":["// import React from 'react';\n// import {\n//   Table,\n//   Pagination,\n//   Select\n// } from 'antd'\n\n// import MenuBar from '../components/MenuBar';\n// import { getAllMatches, getAllPlayers } from '../fetcher'\n// const { Column, ColumnGroup } = Table;\n// const { Option } = Select;\n\n\n// const playerColumns = [\n//   {\n//     title: 'Name',\n//     dataIndex: 'Name',\n//     key: 'Name',\n//     sorter: (a, b) => a.Name.localeCompare(b.Name),\n//     render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>\n//   },\n//   {\n//     title: 'Nationality',\n//     dataIndex: 'Nationality',\n//     key: 'Nationality',\n//     sorter: (a, b) => a.Nationality.localeCompare(b.Nationality)\n//   },\n//   {\n//     title: 'Rating',\n//     dataIndex: 'Rating',\n//     key: 'Rating',\n//     sorter: (a, b) => a.Rating - b.Rating\n    \n//   },\n//   // TASK 7: add a column for Potential, with the ability to (numerically) sort ,\n//   {\n//     title: 'Potential',\n//     dataIndex: 'Potential',\n//     key: 'Potential',\n//     sorter: (a, b) => a.Potential - b.Potential\n//   },\n//   // TASK 8: add a column for Club, with the ability to (alphabetically) sort \n//   {\n//     title: 'Club',\n//     dataIndex: 'Club',\n//     key: 'Club',\n//     sorter: (a, b) => a.Club.localeCompare(b.Club)\n//   },\n//   // TASK 9: add a column for Value - no sorting required\n//   {\n//     title: 'Value',\n//     dataIndex: 'Value',\n//     key: 'Value'\n//   }\n// ];\n\n// class HomePage extends React.Component {\n\n//   constructor(props) {\n//     super(props)\n\n//     this.state = {\n//       matchesResults: [],\n//       matchesPageNumber: 1,\n//       matchesPageSize: 10,\n//       playersResults: [],\n//       pagination: null  \n//     }\n\n//     this.leagueOnChange = this.leagueOnChange.bind(this)\n//     this.goToMatch = this.goToMatch.bind(this)\n//   }\n\n\n//   goToMatch(matchId) {\n//     window.location = `/matches?id=${matchId}`\n//   }\n\n//   leagueOnChange(value) {\n//     // TASK 2: this value should be used as a parameter to call getAllMatches in fetcher.js with the parameters page and pageSize set to null\n//     // then, matchesResults in state should be set to the results returned - see a similar function call in componentDidMount()\n//     /** function declaration (fetcher.js): getAllMatches = async (page, pagesize, league) */\n//     // `value` arg of this function should be passed as arg in position of `league` into getAllMatches()\n//     getAllMatches(null, null, value).then(res => {\n//       this.setState({ matchesResults: res.results })\n//     })\n//   }\n\n//   componentDidMount() {\n//     getAllMatches(null, null, 'D1').then(res => {\n//       this.setState({ matchesResults: res.results })\n//     })\n\n//     getAllPlayers().then(res => {\n//       console.log(res.results)\n//       // TASK 1: set the correct state attribute to res.results\n//       this.setState({playersResults: res.results})\n//       // recall in routes.js, all functions return query results in k/v-pairs of [results: queryResults] \n//       // so res.results here is deferencing this k/v-pair to get the value ==> queryResults\n\n//     })\n//   }\n\n\n//   render() {\n\n//     return (\n//       <div>\n//         <MenuBar />\n        \n//         <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\n//           <h3>Players</h3>\n//           <Table dataSource={this.state.playersResults} columns={playerColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\n//         </div>\n        \n//         <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\n//           <h3>Matches</h3>\n//           <Select defaultValue=\"D1\" style={{ width: 120 }} onChange={this.leagueOnChange}>\n//             <Option value=\"D1\">Bundesliga</Option>\n//              {/* TASK 3: Take a look at Dataset Information.md from MS1 and add other options to the selector here  */}\n//             <Option value=\"SP1\">La Liga</Option>\n//             <Option value=\"F1\">Ligue 1</Option>\n//             <Option value=\"I1\">Serie A</Option>\n//             <Option value=\"E0\">Premier League</Option>\n//           </Select>\n          \n//           <Table onRow={(record, rowIndex) => { return {\n//                                                   onClick: event => {this.goToMatch(record.MatchId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \n//                                                 };\n//                                               }} \n//                   dataSource={this.state.matchesResults} \n//                   pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\n//                   <ColumnGroup title=\"Teams\">\n//                     {/* TASK 4: correct the title for the 'Home' column and add a similar column for 'Away' team in this ColumnGroup */}\n//                     <Column title=\"H\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/> {/* localeCompare() is a JS string method, that compare string a & b */}\n//                     <Column title=\"A\" dataIndex=\"Away\" key=\"Away\" sorter= {(a, b) => a.Away.localeCompare(b.Away)}/>\n//                   </ColumnGroup>\n                                  \n//                   <ColumnGroup title=\"Goals\">\n//                     {/* TASK 5: add columns for home and away goals in this ColumnGroup, with the ability to sort values in these columns numerically */}\n//                     <Column title=\"HomeGoals\" dataIndex=\"HomeGoals\" key=\"HomeGoals\" sorter= {(a, b) => a.HomeGoals - b.HomeGoals}/>\n//                     <Column title=\"AwayGoals\" dataIndex=\"AwayGoals\" key=\"AwayGoals\" sorter= {(a, b) => a.AwayGoals - b.AwayGoals}/>\n//                   </ColumnGroup>\n                  \n//                   {/* TASK 6: create two columns (independent - not in a column group) for the date and time. Do not add a sorting functionality */}\n//                   <Column title=\"Date\" dataIndex=\"Date\" key=\"Date\"/>\n//                   <Column title=\"Time\" dataIndex=\"Time\" key=\"Time\"/>\n//           </Table>\n\n//         </div>\n\n\n//       </div>\n//     )\n//   }\n\n// }\n\n// export default HomePage\n\n"]},"metadata":{},"sourceType":"module"}